<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>SQL Injection on Diego Brocanelli</title>
    <link>https://diegobrocanelli.com.br/tags/sql-injection/</link>
    <description>Recent content in SQL Injection on Diego Brocanelli</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <lastBuildDate>Mon, 06 Feb 2017 22:08:22 +0000</lastBuildDate><atom:link href="https://diegobrocanelli.com.br/tags/sql-injection/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Defesa eficaz contra SQL Injection – Comunicação com o banco de dados</title>
      <link>https://diegobrocanelli.com.br/php/defesa-eficaz-contra-sql-injection-comunicacao-com-o-banco-de-dados/</link>
      <pubDate>Mon, 06 Feb 2017 22:08:22 +0000</pubDate>
      
      <guid>https://diegobrocanelli.com.br/php/defesa-eficaz-contra-sql-injection-comunicacao-com-o-banco-de-dados/</guid>
      <description>Fala galera, tudo tranquilo?!
Chegamos na última parte de nossa trajetória de defesa eficaz contra SQL Injection, caso você esteja lendo este conteúdo e não tem conhecimento dos outros dois posts (Defesa eficaz contra SQL Injection – Introdução e Defesa eficaz contra SQL Injection – Filtragem e validação dos dados) recomendo a leitura para maior compreensão do tema.
Nós demos uma introdução do SQL Injection, abordamos o quão importante é validar e filtrar os dados recebidos antes de realizar a consulta no banco de dados e agora vamos completar nosso ciclo de login realizando uma consulta no banco para confirmar a existência ou não do usuário no banco de dados.</description>
    </item>
    
    <item>
      <title>Defesa eficaz contra SQL Injection – Filtragem e validação dos dados</title>
      <link>https://diegobrocanelli.com.br/php/defesa-eficaz-contra-sql-injection-filtragem-e-validacao-dos-dados/</link>
      <pubDate>Mon, 06 Feb 2017 22:08:16 +0000</pubDate>
      
      <guid>https://diegobrocanelli.com.br/php/defesa-eficaz-contra-sql-injection-filtragem-e-validacao-dos-dados/</guid>
      <description>Fala galera, tudo tranquilo?!
Neste post daremos continuidade a nossa seŕie de posts para prevenção de SQL injection, caso você ainda não tenha lido nosso primeiro post “Defesa eficaz contra SQL Injection – Introdução” recomendo a leitura para que assim você possa usufruir com maior qualidade dos textos.
Todo sistema, sendo ele desktop, mobile ou web ele recebe dados transmitidos pelo usuário, podendo ser um simples formulário para coleta de e-mail até informações complexas como controle de fluxo orçamentário da empresa.</description>
    </item>
    
    <item>
      <title>Defesa eficaz contra SQL Injection – Introdução</title>
      <link>https://diegobrocanelli.com.br/php/defesa-eficaz-contra-sql-injection-introducao/</link>
      <pubDate>Mon, 06 Feb 2017 22:08:07 +0000</pubDate>
      
      <guid>https://diegobrocanelli.com.br/php/defesa-eficaz-contra-sql-injection-introducao/</guid>
      <description>Fala galera, tudo tranquilo?!
Um tema muito bacana e recorrente no desenvolvimento web é SQL Injection e neste post irei abordar algumas boas práticas na defesa contra esses ataques.
Teremos 3 posts relacionados ao tema, sendo:
Introdução ao SQL Injection. Filtragem e validação de dados. Comunicação com o banco de dados. O que é SQL Injection? É um tipo de ameaça relacionado a segurança, que se aproveita de falhas em sistemas que interagem com bases de dados para inserir trechos de código SQL para realizar ações não desejadas e para manipular, roubar ou danificar a estrutura ou dados contidos no banco de dados.</description>
    </item>
    
  </channel>
</rss>
